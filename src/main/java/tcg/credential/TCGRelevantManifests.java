package tcg.credential;

import java.util.Arrays;
import java.util.List;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import lombok.Singular;
import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1Object;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.DERSequence;

/**
 * <pre>
 * TCGRelevantManifests::=
 *      SEQUENCE SIZE (1..REFMAX) OF HashedSubjectInfoURI
 * </pre>
 */
@AllArgsConstructor
@Builder(toBuilder = true)
@Getter
@NoArgsConstructor(force = true)
public class TCGRelevantManifests extends ASN1Object {

	@Singular
	private final List<HashedSubjectInfoURI> urls;

	/**
	 * Attempts to cast the provided object.
	 * If the object is an ASN1Sequence, the object is parsed by fromASN1Sequence.
	 * @param obj the object to parse
	 * @return TCGRelevantManifests
	 */
	public static TCGRelevantManifests getInstance(Object obj) {
		if (obj == null || obj instanceof TCGRelevantManifests) {
			return (TCGRelevantManifests) obj;
		}
		if (obj instanceof ASN1Sequence seq) {
			return TCGRelevantManifests.fromASN1Sequence(seq);
		}
		throw new IllegalArgumentException("Illegal argument in getInstance: " + obj.getClass().getName());
	}

	/**
	 * Attempts to parse the given ASN1Sequence.
	 * @param seq An ASN1Sequence
	 * @return TCGRelevantManifests
	 */
	public static TCGRelevantManifests fromASN1Sequence(@NonNull ASN1Sequence seq) {
		TCGRelevantManifests.TCGRelevantManifestsBuilder builder = TCGRelevantManifests.builder();
		builder.urlsFromSequence(seq);
		return builder.build();
	}

	/**
	 * @return This object as an ASN1Sequence
	 */
	public ASN1Primitive toASN1Primitive() {
		ASN1EncodableVector vec = new ASN1EncodableVector();
		if (urls != null) {
			vec.add(new DERSequence(ASN1Utils.toASN1EncodableVector(urls)));
		}
		return new DERSequence(vec);
	}

	/**
	 * The rest of this builder is generated by lombok Builder annotation
	 */
	public static class TCGRelevantManifestsBuilder {
		/**
		 * Reads elements of the given sequence as HashedSubjectInfoURI and adds them to the builder.
		 * @param seq ASN1Sequence
		 */
		public final void urlsFromSequence(@NonNull ASN1Sequence seq) {
			Arrays.asList(seq.toArray()).forEach(
					element ->
							this.url(HashedSubjectInfoURI.getInstance(element)));
		}
	}
}
