package tcg.credential;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import java.util.Arrays;
import java.util.List;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import lombok.Singular;
import lombok.ToString;
import lombok.extern.jackson.Jacksonized;
import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1Object;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERTaggedObject;

/**
 * <pre>
 * platformConfiguration ATTRIBUTE ::= {
 *      WITH SYNTAX PlatformConfiguration-v3
 *      ID tcg-at-platformConfiguration-v3 }
 *
 * PlatformConfiguration-v3 ::= SEQUENCE {
 *      platformComponents [0] IMPLICIT SEQUENCE(SIZE(1..MAX)) OF ComponentIdentifier OPTIONAL,
 *      platformProperties [1] IMPLICIT SEQUENCE(SIZE(1..MAX)) OF Property OPTIONAL }
 *
 * ComponentIdentifier ::= SEQUENCE(SIZE(1..MAX)) OF Trait
 *
 * Property ::= SEQUENCE {
 *      propertyName UTF8String (SIZE (1..STRMAX)),
 *      propertyValue UTF8String (SIZE (1..STRMAX)),
 *      status [0] IMPLICIT AttributeStatus OPTIONAL }
 *
 * AttributeStatus ::= ENUMERATED {
 *      added (0),
 *      modified (1),
 *      removed (2) }
 * </pre>
 */
@AllArgsConstructor
@Builder(toBuilder = true)
@EqualsAndHashCode(callSuper = true)
@Getter
@Jacksonized
@JsonFormat(with = JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES)
@JsonIgnoreProperties(ignoreUnknown = true)
@NoArgsConstructor(force = true)
@ToString
public class PlatformConfigurationV3 extends ASN1Object {
    private static final int MIN_SEQUENCE_SIZE = 0;
    private static final int MAX_SEQUENCE_SIZE = 2;

    private final TraitSequence platformComponents; // optional, tagged 0
    @Singular
    private final List<PlatformPropertiesV2> platformProperties; // optional, tagged 1

    /**
     * Attempts to cast the provided object.
     * If the object is an ASN1Sequence, the object is parsed by fromASN1Sequence.
     * @param obj the object to parse
     * @return PlatformConfigurationV3
     */
    public static PlatformConfigurationV3 getInstance(Object obj) {
        if (obj == null || obj instanceof PlatformConfigurationV3) {
            return (PlatformConfigurationV3) obj;
        }
        if (obj instanceof ASN1Sequence seq) {
            return PlatformConfigurationV3.fromASN1Sequence(seq);
        }
        throw new IllegalArgumentException("Illegal argument in getInstance: " + obj.getClass().getName());
    }

    /**
     * Attempts to parse the given ASN1Sequence.
     * @param seq An ASN1Sequence
     * @return PlatformConfigurationV3
     */
    public static PlatformConfigurationV3 fromASN1Sequence(@NonNull ASN1Sequence seq) {
        if (seq.size() < PlatformConfigurationV3.MIN_SEQUENCE_SIZE) {
            throw new IllegalArgumentException("Bad sequence size: " + seq.size());
        }

        PlatformConfigurationV3.PlatformConfigurationV3Builder builder = PlatformConfigurationV3.builder();

        ASN1Utils.parseTaggedElements(seq).forEach((key, value) -> {
            switch (key) {
                case 0 -> builder.platformComponents(TraitSequence.getInstance(value));
                case 1 -> builder.platformPropertiesFromSequence(ASN1Sequence.getInstance(value));
                default -> {}
            }
        });

        return builder.build();
    }

    /**
     * @return This object as an ASN1Sequence
     */
    public ASN1Primitive toASN1Primitive() {
        ASN1EncodableVector vec = new ASN1EncodableVector();
        if (platformComponents != null) {
            vec.add(new DERTaggedObject(false, 0, platformComponents));
        }
        if (platformProperties != null) {
            vec.add(new DERTaggedObject(false, 1, new DERSequence(ASN1Utils.toASN1EncodableVector(platformProperties))));
        }
        return new DERSequence(vec);
    }

    /**
     * The rest of this builder is generated by lombok Builder annotation
     */
    public static class PlatformConfigurationV3Builder {
        /**
         * Reads elements of the given sequence as PlatformPropertiesV2 and adds them to the builder.
         * @param seq ASN1Sequence
         */
        public final void platformPropertiesFromSequence(@NonNull ASN1Sequence seq) {
            Arrays.asList(seq.toArray()).forEach(
                    element ->
                            this.platformProperty(PlatformPropertiesV2.getInstance(element)));
        }
    }
}
