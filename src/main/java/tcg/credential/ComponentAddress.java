package tcg.credential;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import json.ComponentAddressDeserializer;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1Object;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1UTF8String;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERUTF8String;

/**
 * <pre>
 * ComponentAddress ::= SEQUENCE {
 *      addressType AddressType,
 *      addressValue UTF8String (SIZE (1..STRMAX)) }
 *
 * AddressType ::= OBJECT IDENTIFIER (tcg-address-ethernetmac | tcg-address-wlanmac | tcg-address-bluetoothmac)
 * </pre>
 */
@AllArgsConstructor
@Builder(toBuilder = true)
@JsonFormat(with = JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES)
@JsonDeserialize(using = ComponentAddressDeserializer.class) // To accept a standard format and also a single element format
@JsonIgnoreProperties(ignoreUnknown = true)
@Getter
@NoArgsConstructor(force = true)
public class ComponentAddress extends ASN1Object {
	private static final int SEQUENCE_SIZE = 2;

	@NonNull
	private final ASN1ObjectIdentifier addressType;
	@JsonDeserialize(as = DERUTF8String.class)
	@NonNull
	private final ASN1UTF8String addressValue;

	/**
	 * Attempts to cast the provided object.
	 * If the object is an ASN1Sequence, the object is parsed by fromASN1Sequence.
	 * @param obj the object to parse
	 * @return ComponentAddress
	 */
	public static ComponentAddress getInstance(Object obj) {
		if (obj == null || obj instanceof ComponentAddress) {
			return (ComponentAddress) obj;
		}
		if (obj instanceof ASN1Sequence seq) {
			return ComponentAddress.fromASN1Sequence(seq);
		}
		throw new IllegalArgumentException("Illegal argument in getInstance: " + obj.getClass().getName());
	}

	/**
	 * Attempts to parse the given ASN1Sequence.
	 * @param seq An ASN1Sequence
	 * @return ComponentAddress
	 */
	public static final ComponentAddress fromASN1Sequence(@NonNull ASN1Sequence seq) {
		if (seq.size() != ComponentAddress.SEQUENCE_SIZE) {
			throw new IllegalArgumentException("Bad sequence size: " + seq.size());
		}

		ASN1Object[] elements = (ASN1Object[]) seq.toArray();

		ComponentAddress.ComponentAddressBuilder builder = ComponentAddress.builder()
				.addressType(ASN1ObjectIdentifier.getInstance(elements[0]))
				.addressValue(DERUTF8String.getInstance(elements[1]));

		return builder.build();
	}

	/**
	 * @return This object as an ASN1Sequence
	 */
	public ASN1Primitive toASN1Primitive() {
		ASN1EncodableVector vec = new ASN1EncodableVector();
		vec.add(addressType);
		vec.add(addressValue);
		return new DERSequence(vec);
	}

	/**
     * The rest of this builder is generated by lombok Builder annotation
     */
    public static class ComponentAddressBuilder {
        public final void addressTypeFromEnum(@NonNull ComponentAddressType type) {
            this.addressType(type.getOid());
        }
	}
}
