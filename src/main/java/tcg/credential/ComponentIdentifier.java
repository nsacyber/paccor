package tcg.credential;

import java.util.Arrays;
import java.util.List;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import lombok.Singular;
import org.bouncycastle.asn1.ASN1Boolean;
import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1Object;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1UTF8String;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.DERUTF8String;

/**
 * <pre>
 * ComponentIdentifier ::= SEQUENCE {
 *      componentManufacturer UTF8String (SIZE (1..STRMAX)),
 *      componentModel UTF8String (SIZE (1..STRMAX)),
 *      componentSerial[0] IMPLICIT UTF8String (SIZE (1..STRMAX)) OPTIONAL,
 *      componentRevision [1] IMPLICIT UTF8String (SIZE (1..STRMAX)) OPTIONAL,
 *      componentManufacturerId [2] IMPLICIT PrivateEnterpriseNumber OPTIONAL,
 *      fieldReplaceable [3] IMPLICIT BOOLEAN OPTIONAL,
 *      componentAddress [4] IMPLICIT SEQUENCE(SIZE(1..CONFIGMAX)) OF ComponentAddress OPTIONAL }
 * </pre>
 */
@AllArgsConstructor
@Builder(toBuilder = true)
@Getter
@NoArgsConstructor(force = true)
public class ComponentIdentifier extends ASN1Object {
	private static final int MIN_SEQUENCE_SIZE = 2;
	private static final int MAX_SEQUENCE_SIZE = 7;

	@NonNull
	private final ASN1UTF8String componentManufacturer;
	@NonNull
	private final ASN1UTF8String componentModel;
	private final ASN1UTF8String componentSerial; // optional, tagged 0
	private final ASN1UTF8String componentRevision; // optional, tagged 1
	private final ASN1ObjectIdentifier componentManufacturerId; // optional, tagged 2
	private final ASN1Boolean fieldReplaceable; // optional, tagged 3
	@Singular
	private final List<ComponentAddress> componentAddresses; // optional, tagged 4

	/**
	 * Attempts to cast the provided object.
	 * If the object is an ASN1Sequence, the object is parsed by fromASN1Sequence.
	 * @param obj the object to parse
	 * @return ComponentIdentifier
	 */
	public static ComponentIdentifier getInstance(Object obj) {
		if (obj == null || obj instanceof ComponentIdentifier) {
			return (ComponentIdentifier) obj;
		}
		if (obj instanceof ASN1Sequence seq) {
			return ComponentIdentifier.getInstance(seq);
		}
		throw new IllegalArgumentException("Illegal argument in getInstance: " + obj.getClass().getName());
	}

	/**
	 * Attempts to parse the given ASN1Sequence.
	 * @param seq An ASN1Sequence
	 * @return ComponentIdentifier
	 */
	public static ComponentIdentifier fromASN1Sequence(@NonNull ASN1Sequence seq) {
		if (seq.size() < ComponentIdentifier.MIN_SEQUENCE_SIZE) {
			throw new IllegalArgumentException("Bad sequence size: " + seq.size());
		}

		ASN1Object[] elements = (ASN1Object[]) seq.toArray();

		ComponentIdentifier.ComponentIdentifierBuilder builder = ComponentIdentifier.builder()
				.componentManufacturer(DERUTF8String.getInstance(elements[0]))
				.componentModel(DERUTF8String.getInstance(elements[1]));

		ASN1Utils.parseTaggedElements(seq).forEach((key, value) -> {
			switch (key) {
				case 0 -> builder.componentSerial(DERUTF8String.getInstance(value));
				case 1 -> builder.componentRevision(DERUTF8String.getInstance(value));
				case 2 -> builder.componentManufacturerId(ASN1ObjectIdentifier.getInstance(value));
				case 3 -> builder.fieldReplaceable(ASN1Boolean.getInstance(value));
				case 4 -> builder.componentAddressesFromSequence(ASN1Sequence.getInstance(value));
				default -> {}
			}
		});

		return builder.build();
	}

	/**
	 * @return This object as an ASN1Sequence
	 */
	public ASN1Primitive toASN1Primitive() {
		ASN1EncodableVector vec = new ASN1EncodableVector();
		vec.add(this.componentManufacturer);
		vec.add(this.componentModel);
		if (this.componentSerial != null) {
			vec.add(new DERTaggedObject(false, 0, this.componentSerial));
		}
		if (this.componentRevision != null) {
			vec.add(new DERTaggedObject(false, 1, this.componentRevision));
		}
		if (this.componentManufacturerId != null) {
			vec.add(new DERTaggedObject(false, 2, this.componentManufacturerId));
		}
		if (this.fieldReplaceable != null) {
			vec.add(new DERTaggedObject(false, 3, this.fieldReplaceable));
		}
		if (this.componentAddresses != null) {
			vec.add(new DERTaggedObject(false, 4, new DERSequence(ASN1Utils.toASN1EncodableVector(this.componentAddresses))));
		}
		return new DERSequence(vec);
	}

	/**
	 * The rest of this builder is generated by lombok Builder annotation
	 */
	public static class ComponentIdentifierBuilder {
		/**
		 * Reads elements of the given sequence as ComponentAddresses and adds them to the builder.
		 * @param seq ASN1Sequence
		 */
		public final void componentAddressesFromSequence(@NonNull ASN1Sequence seq) {
			Arrays.asList(seq.toArray()).forEach(
					element ->
							this.componentAddress(ComponentAddress.getInstance(element)));
		}
	}
}
