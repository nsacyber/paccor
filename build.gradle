wrapper {
    gradleVersion = '4.5.1'
}
import org.gradle.util.VersionNumber

allprojects {
    repositories {
        mavenCentral();
    }

    tasks.withType(Test) {
        afterSuite { desc, result ->
            if (desc.parent == null) {
                logger.lifecycle("${result.successfulTestCount}/${result.testCount} tests passed")
            }
        }
    }

    // Version definitions of all of the libraries we're using.  They're defined
    // here to ensure that all projects are using the same versions of common
    // dependencies:
    ext.libs = [
      bouncycastle:  ['org.bouncycastle:bcpkix-jdk15on:1.67', // Bouncy Castle license
                      'org.bouncycastle:bcprov-ext-jdk15on:1.67'],
      jackson:       ['com.fasterxml.jackson.core:jackson-core:2.15.2', // Apache 2.0
                      'com.fasterxml.jackson.core:jackson-annotations:2.15.2',
                      'com.fasterxml.jackson.core:jackson-databind:2.15.2'],
      jcommander:    'com.beust:jcommander:1.72', // Apache 2.0
      junit:         'junit:junit:4.13.2', // EPL 1.0
      powermock:     ['org.powermock:powermock-module-junit4:1.6.5', // Apache 2.0
                      'org.powermock:powermock-api-mockito:1.6.5']
    ]
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // The ospackage plugin has breaking differences based on gradle version
        // paccor must support gradle 4.5.1 for the forseeable future
        String ospackage_version = "4.9.3" // verified to work with gradle 4.5.1
        if ((VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.1'))) {
            ospackage_version = "8.4.1"
            project.logger.lifecycle("Selecting ospackage $ospackage_version for your gradle version $gradle.gradleVersion.")
            project.logger.lifecycle("Customize the ospackage_version variable in build.gradle if met with plugin errors.")
        }
        classpath "com.netflix.nebula:gradle-ospackage-plugin:$ospackage_version"
    }
}

apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'nebula.ospackage'
apply plugin: 'maven'
apply plugin: 'signing'

ext.refsDir = new File(projectDir, 'refs')

sourceCompatibility = 1.8

dependencies {
    implementation libs.bouncycastle
    implementation libs.jackson
    implementation libs.jcommander

    testImplementation libs.junit
    testImplementation libs.powermock
}

// Maven packaging and signing
group = 'io.github.nsacyber.paccor'
version = '1.1.4r12'
project.gradle.taskGraph.whenReady { graph ->
    project.tasks.findAll().forEach { task ->
      if (task.name.contains("signArchives") || task.name.contains("uploadArchives")) {
          // If this is set to true, the signing and maven
          // properties in gradle.properties must be set.
          task.enabled = false 
    }
  }
}
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            pom.project {
                name 'paccor'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'The Platform Attribute Certificate Creator can gather component details, create, sign, and validate the TCG-defined Platform Credential. #nsacyber'
                url 'https://github.com/nsacyber/paccor'

                scm {
                  connection 'scm:git:git://github.com:nsacyber/paccor.git'
                  developerConnection 'scm:git:git://github.com:nsacyber/paccor.git'
                  url 'https://github.com/nsacyber/paccor'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                      id 'iadgovuser29'
                      name 'iadgovuser29'
                      email '33426478+iadgovuser29@users.noreply.github.com'
                      organization 'NSA Cybersecurity Directorate'
                      organizationUrl 'https://github.com/nsacyber'
                    }
                }
            }
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://${sonatypeDomain}/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            snapshotRepository(url: "https://${sonatypeDomain}/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
        }
    }
}

// Application packaging into a zip file
def createScript(project, mainClass, name) {
  project.tasks.create(name: name, type: CreateStartScripts) {
    outputDir       = new File(project.buildDir, 'scripts')
    mainClassName   = mainClass
    applicationName = name
    classpath       = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + project.configurations.runtimeClasspath
  }
  project.tasks[name].dependsOn(project.jar)

  project.applicationDistribution.with {
    into("bin") {
      from(project.tasks[name])
      fileMode = 0755
      duplicatesStrategy = 'exclude' // IMPORTANT: eliminates duplicate files within the ZIP
    }
  }
}

// Suppress standard application plugin behavior in favor of easier to read program declarations below
startScripts.enabled = false
run.enabled = false

createScript(project, 'cli.DeviceObserverCli', 'observer')
createScript(project, 'cli.SigningCli', 'signer')
createScript(project, 'cli.ValidatorCli', 'validator')

// Include files into a ZIP
applicationDistribution.from("scripts/") {
    into "scripts"
}
applicationDistribution.from("docs/") {
    into "docs"
}
applicationDistribution.from("./") {
    include {
        FileTreeElement details ->
        details.file.name.endsWith('.md')
    }
    into "./"
}

// Produce packages
ospackage {
    packageName='paccor'
    os=LINUX
    version='1.1.4'
    release='12'

    into '/opt/paccor'
    user 'root'
    fileMode=0755

    requires('dmidecode', '3.2', GREATER | EQUAL)
    requires('ethtool')
    requires('jq')
    requires('lshw')
    requires('nvme-cli')
    requires('vim-common')

    from(jar.outputs.files) {
        into 'lib'
    }

    from('lib') {
        into 'lib'
    }

    from(configurations.runtimeClasspath) {
        into 'lib'
    }

    from('build/scripts') {
        exclude {
            FileTreeElement details ->
            details.file.name.endsWith('.bat')
        }
        into 'bin'
    }
  
    from('scripts') {
        into 'scripts'
    }

    from('docs') {
        exclude {
            FileTreeElement details ->
            details.file.name.endsWith('.odt')
        }
        into 'docs'
    }

    from('./') {
        include {
            FileTreeElement details ->
            details.file.name.endsWith('.md')
        }
        into './'
    }
}

